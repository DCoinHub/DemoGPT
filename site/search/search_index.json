{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to DemoGPT Documentation","text":"<p> DemoGPT is an open-source project that leverages the power of Large Language Models (LLM) to auto-generate LangChain code, which is then transformed into interactive Streamlit applications. This process is powered by the synergy of GPT-3.5-turbo &amp; Llama 2.</p>"},{"location":"#brief-description","title":"Brief Description","text":"<p>DemoGPT is a revolutionary initiative reshaping the landscape of LLM-based application development. By combining the capabilities of GPT-3.5-turbo and Llama 2, DemoGPT auto-generates LangChain code, which is then transformed into interactive Streamlit applications. This process is enriched with a sophisticated architecture that translates user instructions into interactive applications. DemoGPT is more than a project; it's a visionary approach, pushing the boundaries of what's possible in LLM-based application development.</p>"},{"location":"#core-functionalities","title":"Core Functionalities","text":"<p>DemoGPT's core functionalities revolve around four main steps:</p> <ol> <li>Planning: DemoGPT starts by generating a plan from the user's instruction.</li> <li>Task Creation: It then creates specific tasks from the plan and instruction.</li> <li>Code Snippet Generation: These tasks are transferred into code snippets.</li> <li>Final Code Assembly: The code snippets are combined into a final code, resulting in an interactive Streamlit app.</li> </ol> <p>These functionalities allow DemoGPT to transform user instructions into interactive applications, making it a powerful tool for LLM-based application development.</p>"},{"location":"#project-structure","title":"Project Structure","text":"<p>The project is organized into several modules and files. Here's a brief overview of the project structure:</p> <ul> <li>src/plan/</li> <li>src/plan/chains/</li> <li>src/plan/chains/prompts/</li> </ul> <p>Please navigate through the documentation for a detailed understanding of the project.</p>"},{"location":"app/","title":"Streamlit Application Documentation","text":""},{"location":"app/#introduction","title":"Introduction","text":"<p>This Python Streamlit application uses <code>LogicModel</code> and <code>StreamlitModel</code> from the <code>model</code> module to generate and execute Python code based on user input. The user can input their idea, and the application will generate code, refine it, test it, and display the results. The Streamlit web app allows users to interact with the model in real time, which is particularly useful for demonstrating the capabilities of the models.</p>"},{"location":"app/#application-flow","title":"Application Flow","text":""},{"location":"app/#importing-dependencies","title":"Importing Dependencies","text":"<p>At the beginning of the application, all necessary modules such as <code>streamlit</code>, <code>model</code>, <code>os</code>, <code>logging</code>, <code>webbrowser</code>, and <code>signal</code> are imported. The logging level is set to DEBUG with the format 'levelname-message'.</p>"},{"location":"app/#loading-environment-variables","title":"Loading Environment Variables","text":"<p>The application tries to load environment variables using the <code>dotenv</code> module. If the module is not present, it logs an error message but continues to execute the application.</p>"},{"location":"app/#generate-response","title":"Generate Response","text":"<p>The function <code>generate_response</code> uses the <code>LogicModel</code> to generate responses for the given text. It's a generator function yielding the output of the <code>LogicModel</code> in each iteration.</p>"},{"location":"app/#streamlit-configuration","title":"Streamlit Configuration","text":"<p>The title of the Streamlit page is set using <code>st.set_page_config</code>.</p>"},{"location":"app/#input-fields","title":"Input Fields","text":"<p>Input fields for the OpenAI API Key, demo title, and demo idea are created using <code>st.sidebar.text_input</code>, <code>st.text_input</code>, and <code>st.text_area</code> respectively. The OpenAI API Key defaults to the value of the environment variable 'OPENAI_API_KEY'.</p>"},{"location":"app/#submission-form","title":"Submission Form","text":"<p>A form is created to handle the submission of user input. If the user submits the form, the application checks if a valid OpenAI API Key is entered. If not, it displays a warning message.</p> <p>If the input is valid, instances of <code>LogicModel</code> and <code>StreamlitModel</code> are created with the provided OpenAI API Key.</p>"},{"location":"app/#running-the-model","title":"Running the Model","text":"<p>The application then enters a loop where it generates, refines, tests and executes code using the <code>LogicModel</code>. The progress of this process is displayed on a Streamlit progress bar.</p> <p>If the code execution is successful, it launches a new Streamlit application running the generated code and opens the new application in the web browser.</p> <p>In case the execution was not successful, the application refines the code and retries. If all attempts are unsuccessful, it reports a failure.</p>"},{"location":"src_plan/","title":"src/plan Module","text":"<p>The <code>src/plan</code> module is the core directory of the DemoGPT project. It contains the main application and the modules for the different stages of the DemoGPT pipeline.</p>"},{"location":"src_plan/#files-in-srcplan","title":"Files in src/plan","text":"<ul> <li><code>app.py</code>: This is the main application file that starts the Streamlit application.</li> <li><code>cli.py</code>: This file is responsible for initiating the Streamlit application.</li> <li><code>model.py</code>: This file contains the modules corresponding to the plan, task, code generation, and code finalization stages of the DemoGPT pipeline.</li> <li><code>test_cases.py</code>: This file contains test examples to test the model.</li> <li><code>test.py</code>: This file contains the tests for the modules.</li> <li><code>utils.py</code>: This file contains helper modules to assist the pipeline.</li> </ul>"},{"location":"src_plan/#chains-folder","title":"chains Folder","text":"<p>The <code>chains</code> folder contains the files related to the task chains and their definitions.</p> <ul> <li><code>chains.py</code>: This file includes the model definitions which are plan, tasks, and final.</li> <li><code>task_chains.py</code>: This file includes the implementations of all the available tasks.</li> <li><code>task_definitions.py</code>: This file includes definitions of all the available tasks.</li> </ul>"},{"location":"src_plan/#prompts-folder","title":"prompts Folder","text":"<p>The <code>prompts</code> folder under <code>chains</code> contains all the necessary prompts for the models.</p>"},{"location":"src_plan/#summary","title":"Summary","text":"<p>The <code>src/plan</code> module is the heart of the DemoGPT project. It orchestrates the different stages of the pipeline, from planning to task creation, code snippet generation, and final code assembly. The <code>chains</code> folder within this module contains the definitions and implementations of the tasks, as well as the prompts for the models. The <code>test_cases.py</code> and <code>test.py</code> files provide a suite of tests to ensure the correct functioning of the modules.</p>"},{"location":"src_plan_chains/","title":"src/plan/chains Module","text":"<p>The <code>src/plan/chains</code> module is a subdirectory of the <code>src/plan</code> module in the DemoGPT project. It contains the files related to the task chains and their definitions.</p>"},{"location":"src_plan_chains/#files-in-srcplanchains","title":"Files in src/plan/chains","text":"<ul> <li><code>chains.py</code>: This file includes the model definitions which are plan, tasks, and final.</li> <li><code>task_chains.py</code>: This file includes the implementations of all the available tasks.</li> <li><code>task_definitions.py</code>: This file includes definitions of all the available tasks.</li> </ul>"},{"location":"src_plan_chains/#prompts-folder","title":"prompts Folder","text":"<p>The <code>prompts</code> folder under <code>chains</code> contains all the necessary prompts for the models.</p>"},{"location":"src_plan_chains/#summary","title":"Summary","text":"<p>The <code>src/plan/chains</code> module is a crucial part of the DemoGPT project. It contains the definitions and implementations of the tasks that are used in the DemoGPT pipeline. The <code>chains.py</code> file includes the model definitions for the plan, tasks, and final stages of the pipeline. The <code>task_chains.py</code> and <code>task_definitions.py</code> files contain the implementations and definitions of all the available tasks, respectively. The <code>prompts</code> folder contains the prompts for the models, which are used to guide the models in performing the tasks.</p>"},{"location":"src_plan_chains_prompts/","title":"src/plan/chains/prompts Module","text":"<p>The <code>src/plan/chains/prompts</code> module is a subdirectory of the <code>src/plan/chains</code> module in the DemoGPT project. It contains the files related to the prompts for the models.</p>"},{"location":"src_plan_chains_prompts/#files-in-srcplanchainsprompts","title":"Files in src/plan/chains/prompts","text":"<ul> <li><code>plan.py</code>: This file includes the prompt for plan generation.</li> <li><code>tasks.py</code>: This file includes the prompt for task generation.</li> <li><code>final.py</code>: This file includes the finalizer code which combines code snippets and generates the final Streamlit code.</li> </ul>"},{"location":"src_plan_chains_prompts/#task_list-folder","title":"task_list Folder","text":"<p>The <code>task_list</code> folder under <code>prompts</code> contains the prompts for the available tasks.</p>"},{"location":"src_plan_chains_prompts/#summary","title":"Summary","text":"<p>The <code>src/plan/chains/prompts</code> module is a crucial part of the DemoGPT project. It contains the prompts that guide the models in performing the tasks in the DemoGPT pipeline. The <code>plan.py</code>, <code>tasks.py</code>, and <code>final.py</code> files include the prompts for the plan generation, task generation, and finalization stages of the pipeline, respectively. The <code>task_list</code> folder within <code>prompts</code> contains the prompts for the available tasks.</p>"},{"location":"src_plan_chains_prompts_tasks/","title":"src/plan/chains/prompts/task_list Module","text":"<p>The <code>src/plan/chains/prompts/task_list</code> module is a subdirectory of the <code>src/plan/chains/prompts</code> module in the DemoGPT project. It contains the files related to the tasks and their definitions.</p>"},{"location":"src_plan_chains_prompts_tasks/#files-in-srcplanchainspromptstask_list","title":"Files in src/plan/chains/prompts/task_list","text":"<ul> <li><code>hub_bash.py</code>: Executes bash commands and provides results.</li> <li><code>hub_meteo.py</code>: Provides weather forecasts, conditions, and related information.</li> <li><code>hub_pal_math.py</code>: Solves complex math problems and equations.</li> <li><code>hub_question_answering.py</code>: Extracts and provides specific information from files in response to questions.</li> <li><code>hub_summarize.py</code>: Summarizes long text into concise and relevant information.</li> <li><code>memory.py</code>: Stores and retrieves conversation history or contextual information.</li> <li><code>prompt_chat_template.py</code>: Generates intelligent text output, such as questions or responses, from a given context or input.</li> <li><code>prompt_list_parser.py</code>: Transforms the input text into a list.</li> <li><code>react.py</code>: Finds information online to answer user queries.</li> <li><code>router.py</code>: Routes queries to the appropriate handler based on context or type.</li> <li><code>ui_input_file.py</code>: Provides a mechanism for users to upload a file and return its content as string.</li> <li><code>ui_input_text.py</code>: Gets input from the user via a text field.</li> <li><code>ui_output_text.py</code>: Shows text output to the user.</li> </ul>"},{"location":"src_plan_chains_prompts_tasks/#summary","title":"Summary","text":"<p>The <code>src/plan/chains/prompts/task_list</code> module contains the definitions of all tasks used in the DemoGPT pipeline. Each task has a specific purpose and is good at performing a certain function. The tasks range from getting user input and showing output to the user, to generating intelligent text output, transforming text into a list, routing queries, answering questions that require external search on the web, summarizing long text, answering questions related to a file, solving math problems, executing bash commands, and providing weather-related information.</p>"}]}