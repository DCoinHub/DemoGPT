{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83e\udde9 Welcome to DemoGPT Documentation As DemoGPT team, we transform a static idea into a dynamic product. Our ultimate goal is to democratize software development and make application development simple, efficient, and accessible. \ud83d\udcdc Brief Description Our value proposition is creating fully functional LLM-based applications from a prompt. \ud83d\udee0\ufe0f Core Functionalities DemoGPT's core functionalities revolve around four main steps: Planning: DemoGPT starts by generating a plan from the user's instruction. Task Creation: It then creates specific tasks from the plan and instruction. Code Snippet Generation: These tasks are transferred into code snippets. Final Code Assembly: The code snippets are combined into a final code, resulting in an interactive Streamlit app. These functionalities allow DemoGPT to transform user instructions into interactive applications, making it a powerful tool for LLM-based application development. \ud83d\uddc2\ufe0f Project Structure The project is organized into several modules and files. Here's a brief overview of the project structure: src/plan/ src/plan/chains/ src/plan/chains/prompts/ Please navigate through the documentation for a detailed understanding of the project.","title":"Home"},{"location":"#welcome-to-demogpt-documentation","text":"As DemoGPT team, we transform a static idea into a dynamic product. Our ultimate goal is to democratize software development and make application development simple, efficient, and accessible.","title":"\ud83e\udde9 Welcome to DemoGPT Documentation"},{"location":"#brief-description","text":"Our value proposition is creating fully functional LLM-based applications from a prompt.","title":"\ud83d\udcdc Brief Description"},{"location":"#core-functionalities","text":"DemoGPT's core functionalities revolve around four main steps: Planning: DemoGPT starts by generating a plan from the user's instruction. Task Creation: It then creates specific tasks from the plan and instruction. Code Snippet Generation: These tasks are transferred into code snippets. Final Code Assembly: The code snippets are combined into a final code, resulting in an interactive Streamlit app. These functionalities allow DemoGPT to transform user instructions into interactive applications, making it a powerful tool for LLM-based application development.","title":"\ud83d\udee0\ufe0f Core Functionalities"},{"location":"#project-structure","text":"The project is organized into several modules and files. Here's a brief overview of the project structure: src/plan/ src/plan/chains/ src/plan/chains/prompts/ Please navigate through the documentation for a detailed understanding of the project.","title":"\ud83d\uddc2\ufe0f Project Structure"},{"location":"app/","text":"Streamlit Application Documentation Introduction This Python Streamlit application uses LogicModel and StreamlitModel from the model module to generate and execute Python code based on user input. The user can input their idea, and the application will generate code, refine it, test it, and display the results. The Streamlit web app allows users to interact with the model in real time, which is particularly useful for demonstrating the capabilities of the models. Application Flow Importing Dependencies At the beginning of the application, all necessary modules such as streamlit , model , os , logging , webbrowser , and signal are imported. The logging level is set to DEBUG with the format 'levelname-message'. Loading Environment Variables The application tries to load environment variables using the dotenv module. If the module is not present, it logs an error message but continues to execute the application. Generate Response The function generate_response uses the LogicModel to generate responses for the given text. It's a generator function yielding the output of the LogicModel in each iteration. Streamlit Configuration The title of the Streamlit page is set using st.set_page_config . Input Fields Input fields for the OpenAI API Key, demo title, and demo idea are created using st.sidebar.text_input , st.text_input , and st.text_area respectively. The OpenAI API Key defaults to the value of the environment variable 'OPENAI_API_KEY'. Submission Form A form is created to handle the submission of user input. If the user submits the form, the application checks if a valid OpenAI API Key is entered. If not, it displays a warning message. If the input is valid, instances of LogicModel and StreamlitModel are created with the provided OpenAI API Key. Running the Model The application then enters a loop where it generates, refines, tests and executes code using the LogicModel . The progress of this process is displayed on a Streamlit progress bar. If the code execution is successful, it launches a new Streamlit application running the generated code and opens the new application in the web browser. In case the execution was not successful, the application refines the code and retries. If all attempts are unsuccessful, it reports a failure.","title":"Streamlit Application Documentation"},{"location":"app/#streamlit-application-documentation","text":"","title":"Streamlit Application Documentation"},{"location":"app/#introduction","text":"This Python Streamlit application uses LogicModel and StreamlitModel from the model module to generate and execute Python code based on user input. The user can input their idea, and the application will generate code, refine it, test it, and display the results. The Streamlit web app allows users to interact with the model in real time, which is particularly useful for demonstrating the capabilities of the models.","title":"Introduction"},{"location":"app/#application-flow","text":"","title":"Application Flow"},{"location":"app/#importing-dependencies","text":"At the beginning of the application, all necessary modules such as streamlit , model , os , logging , webbrowser , and signal are imported. The logging level is set to DEBUG with the format 'levelname-message'.","title":"Importing Dependencies"},{"location":"app/#loading-environment-variables","text":"The application tries to load environment variables using the dotenv module. If the module is not present, it logs an error message but continues to execute the application.","title":"Loading Environment Variables"},{"location":"app/#generate-response","text":"The function generate_response uses the LogicModel to generate responses for the given text. It's a generator function yielding the output of the LogicModel in each iteration.","title":"Generate Response"},{"location":"app/#streamlit-configuration","text":"The title of the Streamlit page is set using st.set_page_config .","title":"Streamlit Configuration"},{"location":"app/#input-fields","text":"Input fields for the OpenAI API Key, demo title, and demo idea are created using st.sidebar.text_input , st.text_input , and st.text_area respectively. The OpenAI API Key defaults to the value of the environment variable 'OPENAI_API_KEY'.","title":"Input Fields"},{"location":"app/#submission-form","text":"A form is created to handle the submission of user input. If the user submits the form, the application checks if a valid OpenAI API Key is entered. If not, it displays a warning message. If the input is valid, instances of LogicModel and StreamlitModel are created with the provided OpenAI API Key.","title":"Submission Form"},{"location":"app/#running-the-model","text":"The application then enters a loop where it generates, refines, tests and executes code using the LogicModel . The progress of this process is displayed on a Streamlit progress bar. If the code execution is successful, it launches a new Streamlit application running the generated code and opens the new application in the web browser. In case the execution was not successful, the application refines the code and retries. If all attempts are unsuccessful, it reports a failure.","title":"Running the Model"},{"location":"mission_and_vision/","text":"\ud83e\udded Mission We want to make it possible for anyone, regardless of their technical skills, to create, improve, and present their Gen-AI applications. \ud83d\udd0d Vision To become the central hub for Gen-AI application.","title":"Mission And Vision"},{"location":"mission_and_vision/#mission","text":"We want to make it possible for anyone, regardless of their technical skills, to create, improve, and present their Gen-AI applications.","title":"\ud83e\udded Mission"},{"location":"mission_and_vision/#vision","text":"To become the central hub for Gen-AI application.","title":"\ud83d\udd0d Vision"},{"location":"pipeline/","text":"\ud83d\udee0\ufe0f DemoGPT Architecture How DemoGPT Works Planning : DemoGPT starts by generating a plan from the user's instruction. Task Creation : It then creates specific tasks from the plan and instruction. Code Snippet Generation : These tasks are transferred into code snippets. Final Code Assembly : The code snippets are combined into a final code, resulting in an interactive application. Refining : All the steps including plan generation, task creation, and code snippet generation will be refined by themselves to pass to the next stage. DB Saving : If the user approves the result then all the generated plan, tasks and code snippets are saved into the database. Thus, next time, there the similar results for the corresponding instruction will be fetched from the DB and refining process will be shorter.","title":"Architecture"},{"location":"pipeline/#demogpt-architecture","text":"","title":"\ud83d\udee0\ufe0f DemoGPT Architecture"},{"location":"pipeline/#how-demogpt-works","text":"Planning : DemoGPT starts by generating a plan from the user's instruction. Task Creation : It then creates specific tasks from the plan and instruction. Code Snippet Generation : These tasks are transferred into code snippets. Final Code Assembly : The code snippets are combined into a final code, resulting in an interactive application. Refining : All the steps including plan generation, task creation, and code snippet generation will be refined by themselves to pass to the next stage. DB Saving : If the user approves the result then all the generated plan, tasks and code snippets are saved into the database. Thus, next time, there the similar results for the corresponding instruction will be fetched from the DB and refining process will be shorter.","title":"How DemoGPT Works"},{"location":"roadmap/","text":"DemoGPT Development Roadmap Our goal is to enable DemoGPT to accomplish anything that can be done. We aim to turn a single static idea into a dynamic evolving product. That's why, we have outlined the following development roadmap: Phase 1: \ud83d\udc23 DemoGPT First Release It is able to generate basic apps using few shot learning Phase 2: \ud83d\udc76\ud83c\udffb DemoGPT Base Model Release with New Pipeline Implement a new DemoGPT pipeline including plan generation, task creation, code snippet generation, and final code assembly. Define useful LangChain tasks and publish a release with the new pipeline without refinement. Phase 3: \ud83d\udcac Feedback Mechanism Regenerate the app based on the given feedback Phase 4: \ud83e\udd9c Expanding the LangChain Tasks It will expand the model capability Phase 5: \ud83e\udd8d API Integration and Expansion Integrate the Gorilla model for API calls. Add Rapid API for expanding available API calls. Phase 6: \ud83c\udf0e Marketplace (Showcase Page) New apps will be generated by users Phase 7: \ud83c\udf0e Marketplace (Generation Page) Extend DemoGPT's capabilities to create react-based applications, leveraging a self-refining strategy for continuous improvement of application performance. Phase 8: \ud83e\udd16 Agent Integration Other agents could be selected as a tool to generate new applications. Like If the user want to generate Non-LLM based app gpt-engineer will be available to generate this app idea Phase 9: \ud83d\udcbb API Generation as an Output As a second option the app will be generated as API instead of UI Phase 10: \ud83d\udd87\ufe0f Integrations The generated apps will be used within the other well known platforms such as notion This roadmap will guide our development efforts, and we look forward to sharing our progress with the community as we work towards making DemoGPT an indispensable tool for app development.","title":"Roadmap"},{"location":"roadmap/#demogpt-development-roadmap","text":"Our goal is to enable DemoGPT to accomplish anything that can be done. We aim to turn a single static idea into a dynamic evolving product. That's why, we have outlined the following development roadmap:","title":"DemoGPT Development Roadmap"},{"location":"roadmap/#phase-1-demogpt-first-release","text":"It is able to generate basic apps using few shot learning","title":"Phase 1: \ud83d\udc23 DemoGPT First Release"},{"location":"roadmap/#phase-2-demogpt-base-model-release-with-new-pipeline","text":"Implement a new DemoGPT pipeline including plan generation, task creation, code snippet generation, and final code assembly. Define useful LangChain tasks and publish a release with the new pipeline without refinement.","title":"Phase 2: \ud83d\udc76\ud83c\udffb DemoGPT Base Model Release with New Pipeline"},{"location":"roadmap/#phase-3-feedback-mechanism","text":"Regenerate the app based on the given feedback","title":"Phase 3: \ud83d\udcac Feedback Mechanism"},{"location":"roadmap/#phase-4-expanding-the-langchain-tasks","text":"It will expand the model capability","title":"Phase 4: \ud83e\udd9c Expanding the LangChain Tasks"},{"location":"roadmap/#phase-5-api-integration-and-expansion","text":"Integrate the Gorilla model for API calls. Add Rapid API for expanding available API calls.","title":"Phase 5: \ud83e\udd8d API Integration and Expansion"},{"location":"roadmap/#phase-6-marketplace-showcase-page","text":"New apps will be generated by users","title":"Phase 6: \ud83c\udf0e Marketplace (Showcase Page)"},{"location":"roadmap/#phase-7-marketplace-generation-page","text":"Extend DemoGPT's capabilities to create react-based applications, leveraging a self-refining strategy for continuous improvement of application performance.","title":"Phase 7: \ud83c\udf0e Marketplace (Generation Page)"},{"location":"roadmap/#phase-8-agent-integration","text":"Other agents could be selected as a tool to generate new applications. Like If the user want to generate Non-LLM based app gpt-engineer will be available to generate this app idea","title":"Phase 8: \ud83e\udd16 Agent Integration"},{"location":"roadmap/#phase-9-api-generation-as-an-output","text":"As a second option the app will be generated as API instead of UI","title":"Phase 9: \ud83d\udcbb API Generation as an Output"},{"location":"roadmap/#phase-10-integrations","text":"The generated apps will be used within the other well known platforms such as notion This roadmap will guide our development efforts, and we look forward to sharing our progress with the community as we work towards making DemoGPT an indispensable tool for app development.","title":"Phase 10: \ud83d\udd87\ufe0f Integrations"},{"location":"src_plan/","text":"src/plan Module The src/plan module is the core directory of the DemoGPT project. It contains the main application and the modules for the different stages of the DemoGPT pipeline. Files in src/plan app.py : This is the main application file that starts the Streamlit application. cli.py : This file is responsible for initiating the Streamlit application. model.py : This file contains the modules corresponding to the plan, task, code generation, and code finalization stages of the DemoGPT pipeline. test_cases.py : This file contains test examples to test the model. test.py : This file contains the tests for the modules. utils.py : This file contains helper modules to assist the pipeline. chains Folder The chains folder contains the files related to the task chains and their definitions. chains.py : This file includes the model definitions which are plan, tasks, and final. task_chains.py : This file includes the implementations of all the available tasks. task_definitions.py : This file includes definitions of all the available tasks. prompts Folder The prompts folder under chains contains all the necessary prompts for the models. Summary The src/plan module is the heart of the DemoGPT project. It orchestrates the different stages of the pipeline, from planning to task creation, code snippet generation, and final code assembly. The chains folder within this module contains the definitions and implementations of the tasks, as well as the prompts for the models. The test_cases.py and test.py files provide a suite of tests to ensure the correct functioning of the modules.","title":"Modules"},{"location":"src_plan/#srcplan-module","text":"The src/plan module is the core directory of the DemoGPT project. It contains the main application and the modules for the different stages of the DemoGPT pipeline.","title":"src/plan Module"},{"location":"src_plan/#files-in-srcplan","text":"app.py : This is the main application file that starts the Streamlit application. cli.py : This file is responsible for initiating the Streamlit application. model.py : This file contains the modules corresponding to the plan, task, code generation, and code finalization stages of the DemoGPT pipeline. test_cases.py : This file contains test examples to test the model. test.py : This file contains the tests for the modules. utils.py : This file contains helper modules to assist the pipeline.","title":"Files in src/plan"},{"location":"src_plan/#chains-folder","text":"The chains folder contains the files related to the task chains and their definitions. chains.py : This file includes the model definitions which are plan, tasks, and final. task_chains.py : This file includes the implementations of all the available tasks. task_definitions.py : This file includes definitions of all the available tasks.","title":"chains Folder"},{"location":"src_plan/#prompts-folder","text":"The prompts folder under chains contains all the necessary prompts for the models.","title":"prompts Folder"},{"location":"src_plan/#summary","text":"The src/plan module is the heart of the DemoGPT project. It orchestrates the different stages of the pipeline, from planning to task creation, code snippet generation, and final code assembly. The chains folder within this module contains the definitions and implementations of the tasks, as well as the prompts for the models. The test_cases.py and test.py files provide a suite of tests to ensure the correct functioning of the modules.","title":"Summary"},{"location":"src_plan_chains/","text":"src/plan/chains Module The src/plan/chains module is a subdirectory of the src/plan module in the DemoGPT project. It contains the files related to the task chains and their definitions. Files in src/plan/chains chains.py : This file includes the model definitions which are plan, tasks, and final. task_chains.py : This file includes the implementations of all the available tasks. task_definitions.py : This file includes definitions of all the available tasks. prompts Folder The prompts folder under chains contains all the necessary prompts for the models. Summary The src/plan/chains module is a crucial part of the DemoGPT project. It contains the definitions and implementations of the tasks that are used in the DemoGPT pipeline. The chains.py file includes the model definitions for the plan, tasks, and final stages of the pipeline. The task_chains.py and task_definitions.py files contain the implementations and definitions of all the available tasks, respectively. The prompts folder contains the prompts for the models, which are used to guide the models in performing the tasks.","title":"Chains"},{"location":"src_plan_chains/#srcplanchains-module","text":"The src/plan/chains module is a subdirectory of the src/plan module in the DemoGPT project. It contains the files related to the task chains and their definitions.","title":"src/plan/chains Module"},{"location":"src_plan_chains/#files-in-srcplanchains","text":"chains.py : This file includes the model definitions which are plan, tasks, and final. task_chains.py : This file includes the implementations of all the available tasks. task_definitions.py : This file includes definitions of all the available tasks.","title":"Files in src/plan/chains"},{"location":"src_plan_chains/#prompts-folder","text":"The prompts folder under chains contains all the necessary prompts for the models.","title":"prompts Folder"},{"location":"src_plan_chains/#summary","text":"The src/plan/chains module is a crucial part of the DemoGPT project. It contains the definitions and implementations of the tasks that are used in the DemoGPT pipeline. The chains.py file includes the model definitions for the plan, tasks, and final stages of the pipeline. The task_chains.py and task_definitions.py files contain the implementations and definitions of all the available tasks, respectively. The prompts folder contains the prompts for the models, which are used to guide the models in performing the tasks.","title":"Summary"},{"location":"src_plan_chains_prompts/","text":"src/plan/chains/prompts Module The src/plan/chains/prompts module is a subdirectory of the src/plan/chains module in the DemoGPT project. It contains the files related to the prompts for the models. Files in src/plan/chains/prompts plan.py : This file includes the prompt for plan generation. tasks.py : This file includes the prompt for task generation. final.py : This file includes the finalizer code which combines code snippets and generates the final Streamlit code. task_list Folder The task_list folder under prompts contains the prompts for the available tasks. Summary The src/plan/chains/prompts module is a crucial part of the DemoGPT project. It contains the prompts that guide the models in performing the tasks in the DemoGPT pipeline. The plan.py , tasks.py , and final.py files include the prompts for the plan generation, task generation, and finalization stages of the pipeline, respectively. The task_list folder within prompts contains the prompts for the available tasks.","title":"Prompts"},{"location":"src_plan_chains_prompts/#srcplanchainsprompts-module","text":"The src/plan/chains/prompts module is a subdirectory of the src/plan/chains module in the DemoGPT project. It contains the files related to the prompts for the models.","title":"src/plan/chains/prompts Module"},{"location":"src_plan_chains_prompts/#files-in-srcplanchainsprompts","text":"plan.py : This file includes the prompt for plan generation. tasks.py : This file includes the prompt for task generation. final.py : This file includes the finalizer code which combines code snippets and generates the final Streamlit code.","title":"Files in src/plan/chains/prompts"},{"location":"src_plan_chains_prompts/#task_list-folder","text":"The task_list folder under prompts contains the prompts for the available tasks.","title":"task_list Folder"},{"location":"src_plan_chains_prompts/#summary","text":"The src/plan/chains/prompts module is a crucial part of the DemoGPT project. It contains the prompts that guide the models in performing the tasks in the DemoGPT pipeline. The plan.py , tasks.py , and final.py files include the prompts for the plan generation, task generation, and finalization stages of the pipeline, respectively. The task_list folder within prompts contains the prompts for the available tasks.","title":"Summary"},{"location":"src_plan_chains_prompts_tasks/","text":"src/plan/chains/prompts/task_list Module The src/plan/chains/prompts/task_list module is a subdirectory of the src/plan/chains/prompts module in the DemoGPT project. It contains the files related to the tasks and their definitions. Files in src/plan/chains/prompts/task_list hub_bash.py : Executes bash commands and provides results. hub_meteo.py : Provides weather forecasts, conditions, and related information. hub_pal_math.py : Solves complex math problems and equations. hub_question_answering.py : Extracts and provides specific information from files in response to questions. hub_summarize.py : Summarizes long text into concise and relevant information. memory.py : Stores and retrieves conversation history or contextual information. prompt_chat_template.py : Generates intelligent text output, such as questions or responses, from a given context or input. prompt_list_parser.py : Transforms the input text into a list. react.py : Finds information online to answer user queries. router.py : Routes queries to the appropriate handler based on context or type. ui_input_file.py : Provides a mechanism for users to upload a file and return its content as string. ui_input_text.py : Gets input from the user via a text field. ui_output_text.py : Shows text output to the user. Summary The src/plan/chains/prompts/task_list module contains the definitions of all tasks used in the DemoGPT pipeline. Each task has a specific purpose and is good at performing a certain function. The tasks range from getting user input and showing output to the user, to generating intelligent text output, transforming text into a list, routing queries, answering questions that require external search on the web, summarizing long text, answering questions related to a file, solving math problems, executing bash commands, and providing weather-related information.","title":"Tasks"},{"location":"src_plan_chains_prompts_tasks/#srcplanchainspromptstask_list-module","text":"The src/plan/chains/prompts/task_list module is a subdirectory of the src/plan/chains/prompts module in the DemoGPT project. It contains the files related to the tasks and their definitions.","title":"src/plan/chains/prompts/task_list Module"},{"location":"src_plan_chains_prompts_tasks/#files-in-srcplanchainspromptstask_list","text":"hub_bash.py : Executes bash commands and provides results. hub_meteo.py : Provides weather forecasts, conditions, and related information. hub_pal_math.py : Solves complex math problems and equations. hub_question_answering.py : Extracts and provides specific information from files in response to questions. hub_summarize.py : Summarizes long text into concise and relevant information. memory.py : Stores and retrieves conversation history or contextual information. prompt_chat_template.py : Generates intelligent text output, such as questions or responses, from a given context or input. prompt_list_parser.py : Transforms the input text into a list. react.py : Finds information online to answer user queries. router.py : Routes queries to the appropriate handler based on context or type. ui_input_file.py : Provides a mechanism for users to upload a file and return its content as string. ui_input_text.py : Gets input from the user via a text field. ui_output_text.py : Shows text output to the user.","title":"Files in src/plan/chains/prompts/task_list"},{"location":"src_plan_chains_prompts_tasks/#summary","text":"The src/plan/chains/prompts/task_list module contains the definitions of all tasks used in the DemoGPT pipeline. Each task has a specific purpose and is good at performing a certain function. The tasks range from getting user input and showing output to the user, to generating intelligent text output, transforming text into a list, routing queries, answering questions that require external search on the web, summarizing long text, answering questions related to a file, solving math problems, executing bash commands, and providing weather-related information.","title":"Summary"},{"location":"test/","text":"TestDemoGPT - Unit Testing TestDemoGPT is a class that contains a series of unit tests to validate the functionality of our application. Test Scenario The test scenario involves planning, task generation, code generation and testing of various tasks in the application like UI input text, UI output text, etc. The test plan uses various test cases defined in TEST_CASES and TOOL_EXAMPLES . Test Methods setUpClass : This method is executed once at the start of the testing process. It sets up the environment required for testing. writeToFile : A helper method to write the test results to a file. printRes : A helper method to print the results in a colorful, formatted manner. test_plan : Tests the plan creation. test_tasks : Tests the task creation. test_final : Tests the final code generation. test_task_ui_input_text : Tests UI input text task. test_task_ui_output_text : Tests UI output text task. test_task_prompt_chat_template : Tests prompt chat template task. test : This method runs the entire workflow of the application, from plan creation to code generation. test_all : This method iterates over all the test cases in TEST_CASES and runs the test method for each of them. How to run tests Running all tests To run all the tests, use the following command: python -m unittest src.plan.test.TestDemoGPT.test_all Running a single test module To run a specific test module, you can use the following command format: python -m unittest src.plan.test.TestDemoGPT.$func_name","title":"Test"},{"location":"test/#testdemogpt-unit-testing","text":"TestDemoGPT is a class that contains a series of unit tests to validate the functionality of our application.","title":"TestDemoGPT - Unit Testing"},{"location":"test/#test-scenario","text":"The test scenario involves planning, task generation, code generation and testing of various tasks in the application like UI input text, UI output text, etc. The test plan uses various test cases defined in TEST_CASES and TOOL_EXAMPLES .","title":"Test Scenario"},{"location":"test/#test-methods","text":"setUpClass : This method is executed once at the start of the testing process. It sets up the environment required for testing. writeToFile : A helper method to write the test results to a file. printRes : A helper method to print the results in a colorful, formatted manner. test_plan : Tests the plan creation. test_tasks : Tests the task creation. test_final : Tests the final code generation. test_task_ui_input_text : Tests UI input text task. test_task_ui_output_text : Tests UI output text task. test_task_prompt_chat_template : Tests prompt chat template task. test : This method runs the entire workflow of the application, from plan creation to code generation. test_all : This method iterates over all the test cases in TEST_CASES and runs the test method for each of them.","title":"Test Methods"},{"location":"test/#how-to-run-tests","text":"","title":"How to run tests"},{"location":"test/#running-all-tests","text":"To run all the tests, use the following command: python -m unittest src.plan.test.TestDemoGPT.test_all","title":"Running all tests"},{"location":"test/#running-a-single-test-module","text":"To run a specific test module, you can use the following command format: python -m unittest src.plan.test.TestDemoGPT.$func_name","title":"Running a single test module"},{"location":"values/","text":"Value Proposition 1. \ud83c\udfe2 Simplifying Gen-AI App Prototyping DemoGPT turns a single prompt into a functional LLM-based application, enabling businesses to swiftly make go/no-go decisions. Without requiring extensive coding knowledge or developer costs, enterprises can efficiently test and validate their ideas. 2. \ud83c\udfaf Specialization in LLM-based Applications Fills a gap left by generic open-source agents, meeting the unique requirements of LLM-based applications. 3. \ud83c\udf10 Dynamic Marketplace Foundation Forms the basis for a marketplace that supports both LLM-based and non-LLM-based applications. 4. \ud83e\udde0 Smart Agent Selection Marketplace intelligently chooses the most suitable open-source agent for application development based on user prompts. 5. \ud83d\udd04 Support for Product Versioning Empowers users to continuously refine and customize their applications. 6. \ud83c\udf89 Democratizing Software Development Transforms a single static idea into a dynamic, evolving product. Aims to make application development simple, efficient, and accessible to all.","title":"Value Proposition"},{"location":"values/#value-proposition","text":"","title":"Value Proposition"},{"location":"values/#1-simplifying-gen-ai-app-prototyping","text":"DemoGPT turns a single prompt into a functional LLM-based application, enabling businesses to swiftly make go/no-go decisions. Without requiring extensive coding knowledge or developer costs, enterprises can efficiently test and validate their ideas.","title":"1. \ud83c\udfe2 Simplifying Gen-AI App Prototyping"},{"location":"values/#2-specialization-in-llm-based-applications","text":"Fills a gap left by generic open-source agents, meeting the unique requirements of LLM-based applications.","title":"2. \ud83c\udfaf Specialization in LLM-based Applications"},{"location":"values/#3-dynamic-marketplace-foundation","text":"Forms the basis for a marketplace that supports both LLM-based and non-LLM-based applications.","title":"3. \ud83c\udf10 Dynamic Marketplace Foundation"},{"location":"values/#4-smart-agent-selection","text":"Marketplace intelligently chooses the most suitable open-source agent for application development based on user prompts.","title":"4. \ud83e\udde0 Smart Agent Selection"},{"location":"values/#5-support-for-product-versioning","text":"Empowers users to continuously refine and customize their applications.","title":"5. \ud83d\udd04 Support for Product Versioning"},{"location":"values/#6-democratizing-software-development","text":"Transforms a single static idea into a dynamic, evolving product. Aims to make application development simple, efficient, and accessible to all.","title":"6. \ud83c\udf89 Democratizing Software Development"}]}